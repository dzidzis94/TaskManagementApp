@model TaskManagementApp.Models.ProjectTemplate

@{
    ViewData["Title"] = "Edit Project Template";
}

<h1>Edit Project Template</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<hr />

<h3>Sections</h3>

<p>
    <a asp-controller="TemplateSections" asp-action="Create" asp-route-projectTemplateId="@Model.Id" class="btn btn-primary">Add Section</a>
</p>

<ul id="section-list" class="list-group">
    @foreach (var section in Model.Sections.Where(s => s.ParentSectionId == null).OrderBy(s => s.Order))
    {
        @await Html.PartialAsync("_SectionEditorRow", section)
    }
</ul>

<div class="mt-3">
    <button id="add-section" class="btn btn-primary">Add Section</button>
    <button id="save-structure" class="btn btn-success">Save Structure</button>
</div>


<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var el = document.getElementById('section-list');
            var sortable = new Sortable(el, {
                group: 'nested',
                animation: 150,
                fallbackOnBody: true,
                swapThreshold: 0.65,
                handle: '.fa-grip-vertical'
            });

            document.getElementById('save-structure').addEventListener('click', function () {
                var sections = [];
                document.querySelectorAll('#section-list > .list-group-item').forEach((item, index) => {
                    var sectionId = item.dataset.id;
                    sections.push({ id: sectionId, order: index, parentSectionId: null });
                    collectChildSections(item, sectionId, sections);
                });

                fetch(`/TemplateSections/UpdateStructure?projectTemplateId=@Model.Id`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': '@Html.AntiForgeryToken()'
                    },
                    body: JSON.stringify(sections)
                }).then(response => {
                    if (response.ok) {
                        showToast('Structure saved successfully!', 'success');
                    } else {
                        showToast('Error saving structure.', 'error');
                    }
                });
            });

            function collectChildSections(parentItem, parentId, sections) {
                parentItem.querySelectorAll(':scope > .list-group > .list-group-item').forEach((item, index) => {
                    var sectionId = item.dataset.id;
                    sections.push({ id: sectionId, order: index, parentSectionId: parentId });
                    collectChildSections(item, sectionId, sections);
                });
            }

            document.getElementById('add-section').addEventListener('click', function () {
                var newSection = {
                    projectTemplateId: @Model.Id,
                    title: 'New Section',
                    description: ''
                };

                fetch('/TemplateSections/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(newSection)
                })
                .then(response => response.text())
                .then(html => {
                    document.getElementById('section-list').insertAdjacentHTML('beforeend', html);
                    showToast('Section added successfully!', 'success');
                })
                .catch(error => {
                    showToast('Error adding section.', 'error');
                });
            });

            document.getElementById('section-list').addEventListener('click', function (e) {
                if (e.target.classList.contains('btn-outline-danger')) {
                    var sectionItem = e.target.closest('.list-group-item');
                    var sectionId = sectionItem.dataset.id;

                    if (confirm('Are you sure you want to delete this section and all its children?')) {
                        fetch(`/TemplateSections/Delete/${sectionId}`, {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': '@Html.AntiForgeryToken()'
                            }
                        }).then(response => {
                            if (response.ok) {
                                sectionItem.remove();
                                showToast('Section deleted successfully!', 'success');
                            } else {
                                showToast('Error deleting section.', 'error');
                            }
                        });
                    }
                }

                if (e.target.classList.contains('btn-outline-primary')) {
                    var sectionItem = e.target.closest('.list-group-item');
                    var sectionId = sectionItem.dataset.id;
                    var title = sectionItem.querySelector('input[type="text"]').value;
                    var description = sectionItem.querySelector('textarea').value;

                    var sectionData = {
                        id: sectionId,
                        title: title,
                        description: description,
                        projectTemplateId: @Model.Id
                    };

                    fetch(`/TemplateSections/Edit/${sectionId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(sectionData)
                    }).then(response => {
                        if (response.ok) {
                            showToast('Section saved successfully!', 'success');
                        } else {
                            showToast('Error saving section.', 'error');
                        }
                    });
                }
            });
        });
    </script>
}