@model TaskManagementApp.Models.TaskItem

<div class="task-card glass-card">
    <div class="task-card-header">
        <h5 class="card-title">@Model.Title</h5>
        <span class="status-badge @GetStatusBadgeClass(Model.Status)">
            @Model.Status.GetDisplayName()
        </span>
    </div>

    <div class="task-card-body">
        @if (!string.IsNullOrEmpty(Model.Description))
        {
            <p class="card-text text-muted">@Model.Description</p>
        }
    </div>

    <div class="task-card-footer">
        <div class="task-meta">
            <div class="task-meta-item">
                <i class="fas fa-user"></i>
                <span>@(Model.TaskAssignments.FirstOrDefault()?.User?.FirstName ?? "Unassigned")</span>
            </div>
            <div class="task-meta-item mt-2">
                <i class="fas fa-calendar"></i>
                <span>@(Model.DueDate?.ToString("MMM dd, yyyy") ?? "No due date")</span>
            </div>
        </div>
        <div class="task-actions">
            <a href="@Url.Action("Edit", "Tasks", new { id = Model.Id })" class="btn btn-sm btn-outline-light"><i class="fas fa-edit"></i></a>
            <a href="@Url.Action("Details", "Tasks", new { id = Model.Id })" class="btn btn-sm btn-outline-light"><i class="fas fa-eye"></i></a>
        </div>
    </div>
</div>

@functions {
    string GetStatusBadgeClass(TaskManagementApp.Models.TaskStatus status)
    {
        return status switch
        {
            TaskManagementApp.Models.TaskStatus.Pending => "pending",
            TaskManagementApp.Models.TaskStatus.InProgress => "in-progress",
            TaskManagementApp.Models.TaskStatus.Completed => "completed",
            TaskManagementApp.Models.TaskStatus.Cancelled => "cancelled",
            _ => ""
        };
    }
}