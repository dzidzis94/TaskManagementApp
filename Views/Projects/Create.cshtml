@model TaskManagementApp.Models.Project

@{
    ViewData["Title"] = "Create New Project";
    var templates = ViewBag.ProjectTemplates as List<ProjectTemplate>;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="gradient-text">Create New Project</h1>
    <button id="open-sidebar-btn" class="btn btn-outline-primary">
        <i class="fas fa-layer-group me-2"></i> Choose from Template
    </button>
</div>

<div class="row">
    <div class="col-12">
        <div class="form-container glass-card p-4">
            <form asp-action="Create" id="create-project-form">
                <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                <input type="hidden" name="templateId" id="selected-template-id" />

                <div class="form-group mb-3">
                    <label asp-for="Name" class="form-label"></label>
                    <input asp-for="Name" class="form-control" placeholder="e.g., Q4 Marketing Campaign" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="Description" class="form-label"></label>
                    <textarea asp-for="Description" class="form-control" rows="4" placeholder="A brief description of the project's goals and deliverables."></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                <div class="form-group form-check mb-4">
                    <input class="form-check-input" asp-for="IsPublic" />
                    <label class="form-check-label" asp-for="IsPublic">
                        @Html.DisplayNameFor(model => model.IsPublic)
                    </label>
                </div>
                <div class="d-flex justify-content-end">
                    <a asp-action="Index" class="btn btn-outline me-2">Cancel</a>
                    <input type="submit" value="Create Project" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Template Sidebar -->
<div id="template-sidebar" class="template-sidebar">
    <div class="template-sidebar-header">
        <h3 class="gradient-text">Project Templates</h3>
        <button id="close-sidebar-btn" class="close-sidebar-btn">&times;</button>
    </div>
    <div id="template-list" class="mt-3">
        @if (templates != null && templates.Any())
        {
            foreach (var template in templates)
            {
                <div class="template-card" data-template-id="@template.Id" data-template-name="@template.Name" data-template-description="@template.Description">
                    <h5>@template.Name</h5>
                    <p class="text-muted small">@template.Description</p>
                    <div class="template-card-footer">
                        <span><i class="fas fa-tasks me-1"></i> @template.Sections.Count Sections</span>
                        <span><i class="fas fa-sitemap me-1"></i> Tasks</span>
                    </div>
                </div>
            }
        }
        else
        {
            <p class="text-muted">No project templates have been created yet.</p>
        }
    </div>
    <div id="template-preview-area">
        <h4 class="gradient-text">Template Preview</h4>
        <div id="template-preview-content">
            <!-- AJAX content will be loaded here -->
        </div>
        <button id="apply-template-btn" class="btn btn-primary btn-apply-template mt-3" disabled>Apply Template</button>
    </div>
</div>
<div class="sidebar-overlay"></div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const sidebar = document.getElementById('template-sidebar');
            const overlay = document.querySelector('.sidebar-overlay');
            const openBtn = document.getElementById('open-sidebar-btn');
            const closeBtn = document.getElementById('close-sidebar-btn');
            const templateCards = document.querySelectorAll('.template-card');
            const previewArea = document.getElementById('template-preview-area');
            const previewContent = document.getElementById('template-preview-content');
            const applyBtn = document.getElementById('apply-template-btn');
            const selectedTemplateIdField = document.getElementById('selected-template-id');
            const projectNameField = document.getElementById('Name');
            const projectDescField = document.getElementById('Description');

            let selectedTemplate = null;

            function openSidebar() {
                sidebar.classList.add('open');
                overlay.classList.add('active');
            }

            function closeSidebar() {
                sidebar.classList.remove('open');
                overlay.classList.remove('active');
            }

            openBtn.addEventListener('click', openSidebar);
            closeBtn.addEventListener('click', closeSidebar);
            overlay.addEventListener('click', closeSidebar);

            templateCards.forEach(card => {
                card.addEventListener('click', function () {
                    const templateId = this.dataset.templateId;

                    if (this.classList.contains('selected')) {
                        this.classList.remove('selected');
                        previewArea.style.display = 'none';
                        applyBtn.disabled = true;
                        selectedTemplate = null;
                        selectedTemplateIdField.value = '';
                    } else {
                        templateCards.forEach(c => c.classList.remove('selected'));
                        this.classList.add('selected');
                        previewArea.style.display = 'block';
                        applyBtn.disabled = false;

                        selectedTemplate = {
                            id: templateId,
                            name: this.dataset.templateName,
                            description: this.dataset.templateDescription
                        };

                        previewContent.innerHTML = '<p class="text-muted pulse-green">Loading preview...</p>';
                        fetch(`/Projects/GetTemplatePreview/${templateId}`)
                            .then(response => {
                                if (!response.ok) throw new Error('Network response was not ok');
                                return response.json();
                            })
                            .then(data => {
                                previewContent.innerHTML = '';
                                if (data && data.length > 0) {
                                    const list = document.createElement('ul');
                                    list.style.listStyleType = 'none';
                                    list.style.paddingLeft = '0';
                                    data.forEach(section => renderSection(section, list));
                                    previewContent.appendChild(list);
                                } else {
                                    previewContent.innerHTML = '<p class="text-muted">This template appears to be empty.</p>';
                                }
                            })
                            .catch(error => {
                                console.error('Error fetching template preview:', error);
                                previewContent.innerHTML = '<p class="text-danger small">An error occurred while loading the preview. Please try again.</p>';
                            });
                    }
                });
            });

            applyBtn.addEventListener('click', function() {
                if (selectedTemplate) {
                    projectNameField.value = selectedTemplate.name;
                    projectDescField.value = selectedTemplate.description;
                    selectedTemplateIdField.value = selectedTemplate.id;
                    closeSidebar();
                }
            });

            function renderSection(section, parentElement) {
                const listItem = document.createElement('li');
                listItem.className = 'preview-task-item';
                listItem.textContent = section.title;

                if (section.children && section.children.length > 0) {
                    const sublist = document.createElement('ul');
                    section.children.forEach(child => renderSection(child, sublist));
                    listItem.appendChild(sublist);
                }
                parentElement.appendChild(listItem);
            }
        });
    </script>
}